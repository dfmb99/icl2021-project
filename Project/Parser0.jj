PARSER_BEGIN(Parser)

import java.util.*;
import java.io.PrintStream;
import java.io.FileOutputStream;

/** ID lister. */
public class Parser {

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < DEF: "def">
  |
  < IN: "in">
  |
  < EQ: "=">
  |
  < END: "end">
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EL: "\n" >
}

ASTNode Start():
{ ASTNode t; }
{
   t = Exp() <EL>
   { return t; }
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1= Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term()
                 { if (op.kind == PLUS)
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 }
               ) *
     { return t1; }
}

ASTNode Term() :
{Token op;
  ASTNode t1, t2;}
{
    t1 = Fact() ( ( op=<TIMES> | op=<DIV> ) t2 = Fact()
 		               { if (op.kind == TIMES)
                          t1 = new ASTMult(t1,t2);
                     else  t1 = new ASTDiv(t1,t2);
                  }
		            ) *
     { return t1; }
}


ASTNode Fact() :
{ Token n;
 List<Token> ids = new ArrayList<>();
 List<ASTNode> init = new ArrayList<>();
  ASTNode t, ei, b;}
{
   ( n=<Num> { t = new ASTNum(Integer.parseInt(n.image)); }
   | <MINUS> n=<Num> { t= new ASTNum(-Integer.parseInt(n.image));}
   | n=<Id> {t = new ASTId(n.image);}
   | <LPAR> t=Exp() <RPAR>
   | <DEF> (n=<Id> <EQ> ei=Exp() { ids.add(n); init.add(ei); } )+ <IN> b=Exp() <END> { t = new ASTDef(ids, init, b); } )
   { return t; }
}