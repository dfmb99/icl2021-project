PARSER_BEGIN(Parser)

import java.util.*;
import java.io.PrintStream;
import java.io.FileOutputStream;

/** ID lister. */
public class Parser {

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < PRINTLN: "println">
  |
  < PRINT: "print">
  |
  < BOOL: "true" | "false">
  |
  < DO: "do">
  |
  < WHILE: "while">
  |
  < ELSE: "else">
  |
  < THEN: "then">
  |
  < IF: "if">
  |
  < ASSIGN: ":=">
  |
  < EQCOMP: "==">
  |
  < NOTEQ: "!=">
  |
  < GREAT: ">">
  |
  < GREATTHAN: ">=">
  |
  < LESS: "<">
  |
  < LESSTHAN: "<=">
  |
  < AND: "&&">
  |
  < OR: "||">
  |
  < NEG: "~">
  |
  < DEREF: "!">
  |
  < NEW: "new">
  |
  < SEQ: ";">
  |
  < DEF: "def">
  |
  < IN: "in">
  |
  < EQ: "=">
  |
  < END: "end">
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < MOD : "%">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EL: "\n" >
}

ASTNode Start():
{ ASTNode t; }
{
   t = ExpS()
   { return t; }
}
ASTNode ExpS():
{ ASTNode t1, t2; }
{
   (<EL>)* t1 = Exp() (<SEQ>)* (<EL>)* ( (<EL>)* t2 = Exp() (<SEQ>)* (<EL>)*{ t1 = new ASTSeq(t1, t2); } ) *
   { return t1; }
}

ASTNode Exp():
{Token op;
 ASTNode t, t1; }
{
    t = ExpA() ( ( op=<EQCOMP> | op=<ASSIGN> | op=<GREATTHAN> | op=<GREAT> | op=<LESSTHAN> | op=<LESS> | op=<AND> | op=<OR> | op=<NOTEQ>) t1 = ExpA()
    { if (op.kind == EQCOMP)
          t = new ASTEq(t, t1);
      else if (op.kind == ASSIGN)
          t = new ASTAssign(t, t1);
      else if (op.kind == GREATTHAN)
          t = new ASTGreatThan(t, t1);
      else if (op.kind == GREAT)
          t = new ASTGreat(t, t1);
      else if (op.kind == LESSTHAN)
          t = new ASTLessThan(t, t1);
      else if (op.kind == LESS)
          t = new ASTLess(t, t1);
      else if (op.kind == AND)
          t = new ASTAnd(t, t1);
      else if (op.kind == OR)
          t = new ASTOr(t, t1);
       else if (op.kind == NOTEQ)
           t = new ASTNotEq(t, t1);
     } ) ?
    { return t; }
}

ASTNode ExpA() :
{ Token op;
  ASTNode t1, t2; }
{
     t1= Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term()
                 { if (op.kind == PLUS)
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 }
               ) *
     { return t1; }
}

ASTNode Term() :
{Token op;
  ASTNode t1, t2;}
{
    t1 = Fact() ( ( op=<TIMES> | op=<DIV> | op=<MOD> ) t2 = Fact()
 		               { if (op.kind == TIMES)
                          t1 = new ASTMult(t1,t2);
                     else if (op.kind == DIV)
                        t1 = new ASTDiv(t1,t2);
                     else if (op.kind == MOD)
                         t1 = new ASTMod(t1,t2);
                  }
		            ) *
     { return t1; }
}


ASTNode Fact() :
{ Token n;
 List<Token> ids = new ArrayList<>();
 List<ASTNode> init = new ArrayList<>();
  ASTNode t, ei, b, f, cond, th, el;
  el = null;
  }
{
   ( n=<Num> { t = new ASTNum(Integer.parseInt(n.image)); }
   | <MINUS> t=ExpS() { t= new ASTMinus(t);}
   | n=<BOOL> { t= new ASTBool(Boolean.parseBoolean(n.image));}
   | <NEG> t=ExpS() { t = new ASTNeg(t); }
   | n=<Id> {t = new ASTId(n.image);}
   | <LPAR> t=ExpS() <RPAR>
   | <DEF> (n=<Id> <EQ> ei=ExpS() { ids.add(n); init.add(ei); } )+ <IN> b=ExpS() <END> { t = new ASTDef(ids, init, b); }
   | <NEW> f=Fact() {t =  new ASTNew(f);}
   | <DEREF> f=Fact() {t =  new ASTDeref(f);}
   | <IF> cond=ExpS() <THEN> th=ExpS() (<ELSE> el=ExpS())* <END> {t =  new ASTIf(cond,th,el); }
   | <WHILE> cond=ExpS() <DO> th=ExpS() <END> {t =  new ASTWhile(cond, th); }
   | <PRINT> t = Exp() { t = new ASTPrint(t); }
   | <PRINTLN> t = Exp() { t = new ASTPrintln(t); } )
   { return t; }
}