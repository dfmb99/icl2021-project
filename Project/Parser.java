/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.util.*;
import java.io.PrintStream;
import java.io.FileOutputStream;

/** ID lister. */
public class Parser implements ParserConstants {

  static final public ASTNode Start() throws ParseException {ASTNode t;
    t = ExpS();
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode ExpS() throws ParseException {ASTNode t1, t2;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EL:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(EL);
    }
    t1 = Exp();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEQ:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(SEQ);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EL:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(EL);
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINTLN:
      case PRINT:
      case BOOL:
      case WHILE:
      case IF:
      case NEG:
      case DEREF:
      case NEW:
      case DEF:
      case Id:
      case Num:
      case MINUS:
      case LPAR:
      case EL:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EL:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        jj_consume_token(EL);
      }
      t2 = Exp();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEQ:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_6;
        }
        jj_consume_token(SEQ);
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EL:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_7;
        }
        jj_consume_token(EL);
      }
t1 = new ASTSeq(t1, t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Exp() throws ParseException {Token op;
 ASTNode t, t1;
    t = ExpA();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:
    case EQCOMP:
    case NOTEQ:
    case GREAT:
    case GREATTHAN:
    case LESS:
    case LESSTHAN:
    case AND:
    case OR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQCOMP:{
        op = jj_consume_token(EQCOMP);
        break;
        }
      case ASSIGN:{
        op = jj_consume_token(ASSIGN);
        break;
        }
      case GREATTHAN:{
        op = jj_consume_token(GREATTHAN);
        break;
        }
      case GREAT:{
        op = jj_consume_token(GREAT);
        break;
        }
      case LESSTHAN:{
        op = jj_consume_token(LESSTHAN);
        break;
        }
      case LESS:{
        op = jj_consume_token(LESS);
        break;
        }
      case AND:{
        op = jj_consume_token(AND);
        break;
        }
      case OR:{
        op = jj_consume_token(OR);
        break;
        }
      case NOTEQ:{
        op = jj_consume_token(NOTEQ);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t1 = ExpA();
if (op.kind == EQCOMP)
          t = new ASTEq(t, t1);
      else if (op.kind == ASSIGN)
          t = new ASTAssign(t, t1);
      else if (op.kind == GREATTHAN)
          t = new ASTGreatThan(t, t1);
      else if (op.kind == GREAT)
          t = new ASTGreat(t, t1);
      else if (op.kind == LESSTHAN)
          t = new ASTLessThan(t, t1);
      else if (op.kind == LESS)
          t = new ASTLess(t, t1);
      else if (op.kind == AND)
          t = new ASTAnd(t, t1);
      else if (op.kind == OR)
          t = new ASTOr(t, t1);
       else if (op.kind == NOTEQ)
           t = new ASTNotEq(t, t1);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode ExpA() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = Term();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        op = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        op = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term();
if (op.kind == PLUS)
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Term() throws ParseException {Token op;
  ASTNode t1, t2;
    t1 = Fact();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:
      case DIV:
      case MOD:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:{
        op = jj_consume_token(TIMES);
        break;
        }
      case DIV:{
        op = jj_consume_token(DIV);
        break;
        }
      case MOD:{
        op = jj_consume_token(MOD);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Fact();
if (op.kind == TIMES)
                          t1 = new ASTMult(t1,t2);
                     else if (op.kind == DIV)
                        t1 = new ASTDiv(t1,t2);
                     else if (op.kind == MOD)
                         t1 = new ASTMod(t1,t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Fact() throws ParseException {Token n;
 List<Token> ids = new ArrayList<>();
 List<ASTNode> init = new ArrayList<>();
  ASTNode t, ei, b, f, cond, th, el;
  el = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Num:{
      n = jj_consume_token(Num);
t = new ASTNum(Integer.parseInt(n.image));
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      t = ExpS();
t= new ASTMinus(t);
      break;
      }
    case BOOL:{
      n = jj_consume_token(BOOL);
t= new ASTBool(Boolean.parseBoolean(n.image));
      break;
      }
    case NEG:{
      jj_consume_token(NEG);
      t = ExpS();
t = new ASTNeg(t);
      break;
      }
    case Id:{
      n = jj_consume_token(Id);
t = new ASTId(n.image);
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      t = ExpS();
      jj_consume_token(RPAR);
      break;
      }
    case DEF:{
      jj_consume_token(DEF);
      label_10:
      while (true) {
        n = jj_consume_token(Id);
        jj_consume_token(EQ);
        ei = ExpS();
ids.add(n); init.add(ei);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Id:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_10;
        }
      }
      jj_consume_token(IN);
      b = ExpS();
      jj_consume_token(END);
t = new ASTDef(ids, init, b);
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      f = Fact();
t =  new ASTNew(f);
      break;
      }
    case DEREF:{
      jj_consume_token(DEREF);
      f = Fact();
t =  new ASTDeref(f);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      cond = ExpS();
      jj_consume_token(THEN);
      th = ExpS();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_11;
        }
        jj_consume_token(ELSE);
        el = ExpS();
      }
      jj_consume_token(END);
t =  new ASTIf(cond,th,el);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      cond = ExpS();
      jj_consume_token(DO);
      th = ExpS();
      jj_consume_token(END);
t =  new ASTWhile(cond, th);
      break;
      }
    case PRINT:{
      jj_consume_token(PRINT);
      t = Exp();
t = new ASTPrint(t);
      break;
      }
    case PRINTLN:{
      jj_consume_token(PRINTLN);
      t = Exp();
t = new ASTPrintln(t);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x1000000,0x0,0x62e00970,0x0,0x1000000,0x0,0x1ff000,0x1ff000,0x80000000,0x80000000,0x0,0x0,0x20000000,0x200,0x62e00970,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x40,0x0,0x40,0x51,0x40,0x0,0x40,0x0,0x0,0x1,0x1,0xe,0xe,0x0,0x0,0x11,};
	}

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[39];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 16; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 39; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
